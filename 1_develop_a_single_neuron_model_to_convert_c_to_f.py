# -*- coding: utf-8 -*-
"""1. Develop A Single Neuron Model to Convert C to F.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CHDPbceE-LisXLhoOw64axVK4cv8Dfko

# PROBLEM STATEMENT

- In this project, we will build a simple machine learning model to convert from celsius to fahrenheit. 
- The equation is as follows: **T(°F) = T(°C) × 9/5 + 32**
- For Example, let's convert 0°C celsius temperature to Fahrenheit:  **(0°C × 9/5) + 32 = 32°F**

<table>
  <tr><td>
    <img src="https://upload.wikimedia.org/wikipedia/commons/7/70/Thermometer_CF.svg"
         alt="Fashion MNIST sprite"  width="600">
  </td></tr>
  <tr><td align="center">
    <b>Figure 1. Convert Celsius to Fahrenheit [Image Source: https://commons.wikimedia.org/wiki/File:Thermometer_CF.svg]
  </td></tr>
</table>

# STEP #0: IMPORT LIBRARIES
"""
import tensorflow as tf
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

"""# STEP #1: IMPORT DATASETS"""

# You will need to mount your drive using the following commands:
# For more information regarding mounting, please check this out: https://stackoverflow.com/questions/46986398/import-data-into-google-colaboratory

#from google.colab import drive
#drive.mount('/Users/deepakbhilare/Documents/git_projects/g/Celsius-to-Fahrenheit.csv')

# You have to include the full link to the csv file containing your dataset
Temperature_df = pd.read_csv('/Users/deepakbhilare/Documents/git_projects/g/Celsius-to-Fahrenheit.csv')
Temperature_df.reset_index(drop=True, inplace=True)

Temperature_df

Temperature_df.head(5)

Temperature_df.tail(10)

Temperature_df.info()

Temperature_df.describe()

"""# STEP #2: VISUALIZE DATASET"""

sns.scatterplot(Temperature_df['Celsius'], Temperature_df['Fahrenheit'])

"""# STEP #3: CREATE TESTING AND TRAINING DATASET"""

X_train = Temperature_df['Celsius']
y_train = Temperature_df['Fahrenheit']

"""# STEP#4: BUILD AND TRAIN THE MODEL"""

X_train.shape

y_train.shape

model = tf.keras.Sequential()
model.add(tf.keras.layers.Dense(units=1, input_shape=[1]))

model.summary()

model.compile(optimizer=tf.keras.optimizers.Adam(0.5), loss='mean_squared_error')

epochs_hist = model.fit(X_train, y_train, epochs = 500)

"""# STEP#5: EVALUATING THE MODEL"""

epochs_hist.history.keys()

plt.plot(epochs_hist.history['loss'])
plt.title('Model Loss Progress During Training')
plt.xlabel('Epoch')
plt.ylabel('Training Loss')
plt.legend(['Training Loss'])

model.get_weights()

# Use the trained model to perform predictions

Temp_C = 40
Temp_F = model.predict([Temp_C])
print('Temperature in degF Using Trained ANN =', Temp_F)

# Let's confirm this Using the equation: 
Temp_F = 9/5 * Temp_C + 32
print('Temperature in degF Using Equation =', Temp_F)

"""# EXCELLENT JOB & CONGRATULATIONS! NOW YOU HAVE BUILT YOUR FIRST NEURAL NETWORK MODEL USING TENSORFLOW 2.0 IN GOOGLE COLAB!"""

